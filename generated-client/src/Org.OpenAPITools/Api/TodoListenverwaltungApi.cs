/*
 * Todo-Listenverwaltung API
 *
 * API zur Verwaltung von Todo-Listen und deren Einträgen
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: asad.saleem@gmx.de
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITodoListenverwaltungApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Eintrag erstellen
        /// </summary>
        /// <remarks>
        /// Dieser Endpunkt erstellt einen neuen Eintrag in einer bestimmten Todo-Liste
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="newEntry">JSON-Objekt mit dem Namen und der Beschreibung des Eintrags</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Entries</returns>
        Entries CreateEntry(Guid listId, NewEntry newEntry, int operationIndex = 0);

        /// <summary>
        /// Eintrag erstellen
        /// </summary>
        /// <remarks>
        /// Dieser Endpunkt erstellt einen neuen Eintrag in einer bestimmten Todo-Liste
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="newEntry">JSON-Objekt mit dem Namen und der Beschreibung des Eintrags</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Entries</returns>
        ApiResponse<Entries> CreateEntryWithHttpInfo(Guid listId, NewEntry newEntry, int operationIndex = 0);
        /// <summary>
        /// Todo-Liste hinzufügen
        /// </summary>
        /// <remarks>
        /// Dieser Endpunkt erstellt eine neue Todo-Liste
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newTodoList">JSON-Objekt mit dem Namen der Liste</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TodoList</returns>
        TodoList CreateTodoList(NewTodoList newTodoList, int operationIndex = 0);

        /// <summary>
        /// Todo-Liste hinzufügen
        /// </summary>
        /// <remarks>
        /// Dieser Endpunkt erstellt eine neue Todo-Liste
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newTodoList">JSON-Objekt mit dem Namen der Liste</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TodoList</returns>
        ApiResponse<TodoList> CreateTodoListWithHttpInfo(NewTodoList newTodoList, int operationIndex = 0);
        /// <summary>
        /// Eintrag löschen
        /// </summary>
        /// <remarks>
        /// Dieser Endpunkt löscht einen bestimmten Eintrag in einer bestimmten Todo-Liste
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="entryId">URL-Element; ID des gewünschten Eintrags</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteTodoList200Response</returns>
        DeleteTodoList200Response DeleteEntry(Guid listId, Guid entryId, int operationIndex = 0);

        /// <summary>
        /// Eintrag löschen
        /// </summary>
        /// <remarks>
        /// Dieser Endpunkt löscht einen bestimmten Eintrag in einer bestimmten Todo-Liste
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="entryId">URL-Element; ID des gewünschten Eintrags</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteTodoList200Response</returns>
        ApiResponse<DeleteTodoList200Response> DeleteEntryWithHttpInfo(Guid listId, Guid entryId, int operationIndex = 0);
        /// <summary>
        /// Todo-Liste löschen
        /// </summary>
        /// <remarks>
        /// Dieser Endpunkt löscht eine einzelne bestimmte Todo-Liste mitsamt ihren Einträgen anhand der ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteTodoList200Response</returns>
        DeleteTodoList200Response DeleteTodoList(Guid listId, int operationIndex = 0);

        /// <summary>
        /// Todo-Liste löschen
        /// </summary>
        /// <remarks>
        /// Dieser Endpunkt löscht eine einzelne bestimmte Todo-Liste mitsamt ihren Einträgen anhand der ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteTodoList200Response</returns>
        ApiResponse<DeleteTodoList200Response> DeleteTodoListWithHttpInfo(Guid listId, int operationIndex = 0);
        /// <summary>
        /// Todo-Liste abrufen
        /// </summary>
        /// <remarks>
        /// Dieser Endpunkt liefert eine einzelne bestimmte Todo-Liste anhand der ID zurück
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TodoList</returns>
        TodoList GetTodoList(Guid listId, int operationIndex = 0);

        /// <summary>
        /// Todo-Liste abrufen
        /// </summary>
        /// <remarks>
        /// Dieser Endpunkt liefert eine einzelne bestimmte Todo-Liste anhand der ID zurück
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TodoList</returns>
        ApiResponse<TodoList> GetTodoListWithHttpInfo(Guid listId, int operationIndex = 0);
        /// <summary>
        /// Einträge abrufen
        /// </summary>
        /// <remarks>
        /// Dieser Endpunkt liefert eine Liste aller Einträge einer bestimmten Todo-Liste zurück
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Entries&gt;</returns>
        List<Entries> GetallEntries(Guid listId, int operationIndex = 0);

        /// <summary>
        /// Einträge abrufen
        /// </summary>
        /// <remarks>
        /// Dieser Endpunkt liefert eine Liste aller Einträge einer bestimmten Todo-Liste zurück
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Entries&gt;</returns>
        ApiResponse<List<Entries>> GetallEntriesWithHttpInfo(Guid listId, int operationIndex = 0);
        /// <summary>
        /// Todo-Listen abrufen
        /// </summary>
        /// <remarks>
        /// Dieser Endpunkt liefert eine Liste aller Todo-Listen zurück
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TodoList&gt;</returns>
        List<TodoList> GetallTodoList(int operationIndex = 0);

        /// <summary>
        /// Todo-Listen abrufen
        /// </summary>
        /// <remarks>
        /// Dieser Endpunkt liefert eine Liste aller Todo-Listen zurück
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TodoList&gt;</returns>
        ApiResponse<List<TodoList>> GetallTodoListWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Eintrag aktualisieren
        /// </summary>
        /// <remarks>
        /// Dieser Endpunkt aktualisiert einen bestimmten Eintrag in einer bestimmten Todo-Liste
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="entryId">URL-Element; ID des gewünschten Eintrags</param>
        /// <param name="newEntry">JSON-Objekt mit dem Namen und der Beschreibung des Eintrags</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateEntry200Response</returns>
        UpdateEntry200Response UpdateEntry(Guid listId, Guid entryId, NewEntry newEntry, int operationIndex = 0);

        /// <summary>
        /// Eintrag aktualisieren
        /// </summary>
        /// <remarks>
        /// Dieser Endpunkt aktualisiert einen bestimmten Eintrag in einer bestimmten Todo-Liste
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="entryId">URL-Element; ID des gewünschten Eintrags</param>
        /// <param name="newEntry">JSON-Objekt mit dem Namen und der Beschreibung des Eintrags</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateEntry200Response</returns>
        ApiResponse<UpdateEntry200Response> UpdateEntryWithHttpInfo(Guid listId, Guid entryId, NewEntry newEntry, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITodoListenverwaltungApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Eintrag erstellen
        /// </summary>
        /// <remarks>
        /// Dieser Endpunkt erstellt einen neuen Eintrag in einer bestimmten Todo-Liste
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="newEntry">JSON-Objekt mit dem Namen und der Beschreibung des Eintrags</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Entries</returns>
        System.Threading.Tasks.Task<Entries> CreateEntryAsync(Guid listId, NewEntry newEntry, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Eintrag erstellen
        /// </summary>
        /// <remarks>
        /// Dieser Endpunkt erstellt einen neuen Eintrag in einer bestimmten Todo-Liste
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="newEntry">JSON-Objekt mit dem Namen und der Beschreibung des Eintrags</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Entries)</returns>
        System.Threading.Tasks.Task<ApiResponse<Entries>> CreateEntryWithHttpInfoAsync(Guid listId, NewEntry newEntry, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Todo-Liste hinzufügen
        /// </summary>
        /// <remarks>
        /// Dieser Endpunkt erstellt eine neue Todo-Liste
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newTodoList">JSON-Objekt mit dem Namen der Liste</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TodoList</returns>
        System.Threading.Tasks.Task<TodoList> CreateTodoListAsync(NewTodoList newTodoList, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Todo-Liste hinzufügen
        /// </summary>
        /// <remarks>
        /// Dieser Endpunkt erstellt eine neue Todo-Liste
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newTodoList">JSON-Objekt mit dem Namen der Liste</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TodoList)</returns>
        System.Threading.Tasks.Task<ApiResponse<TodoList>> CreateTodoListWithHttpInfoAsync(NewTodoList newTodoList, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Eintrag löschen
        /// </summary>
        /// <remarks>
        /// Dieser Endpunkt löscht einen bestimmten Eintrag in einer bestimmten Todo-Liste
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="entryId">URL-Element; ID des gewünschten Eintrags</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteTodoList200Response</returns>
        System.Threading.Tasks.Task<DeleteTodoList200Response> DeleteEntryAsync(Guid listId, Guid entryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Eintrag löschen
        /// </summary>
        /// <remarks>
        /// Dieser Endpunkt löscht einen bestimmten Eintrag in einer bestimmten Todo-Liste
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="entryId">URL-Element; ID des gewünschten Eintrags</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteTodoList200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteTodoList200Response>> DeleteEntryWithHttpInfoAsync(Guid listId, Guid entryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Todo-Liste löschen
        /// </summary>
        /// <remarks>
        /// Dieser Endpunkt löscht eine einzelne bestimmte Todo-Liste mitsamt ihren Einträgen anhand der ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteTodoList200Response</returns>
        System.Threading.Tasks.Task<DeleteTodoList200Response> DeleteTodoListAsync(Guid listId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Todo-Liste löschen
        /// </summary>
        /// <remarks>
        /// Dieser Endpunkt löscht eine einzelne bestimmte Todo-Liste mitsamt ihren Einträgen anhand der ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteTodoList200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteTodoList200Response>> DeleteTodoListWithHttpInfoAsync(Guid listId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Todo-Liste abrufen
        /// </summary>
        /// <remarks>
        /// Dieser Endpunkt liefert eine einzelne bestimmte Todo-Liste anhand der ID zurück
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TodoList</returns>
        System.Threading.Tasks.Task<TodoList> GetTodoListAsync(Guid listId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Todo-Liste abrufen
        /// </summary>
        /// <remarks>
        /// Dieser Endpunkt liefert eine einzelne bestimmte Todo-Liste anhand der ID zurück
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TodoList)</returns>
        System.Threading.Tasks.Task<ApiResponse<TodoList>> GetTodoListWithHttpInfoAsync(Guid listId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Einträge abrufen
        /// </summary>
        /// <remarks>
        /// Dieser Endpunkt liefert eine Liste aller Einträge einer bestimmten Todo-Liste zurück
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Entries&gt;</returns>
        System.Threading.Tasks.Task<List<Entries>> GetallEntriesAsync(Guid listId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Einträge abrufen
        /// </summary>
        /// <remarks>
        /// Dieser Endpunkt liefert eine Liste aller Einträge einer bestimmten Todo-Liste zurück
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Entries&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Entries>>> GetallEntriesWithHttpInfoAsync(Guid listId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Todo-Listen abrufen
        /// </summary>
        /// <remarks>
        /// Dieser Endpunkt liefert eine Liste aller Todo-Listen zurück
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TodoList&gt;</returns>
        System.Threading.Tasks.Task<List<TodoList>> GetallTodoListAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Todo-Listen abrufen
        /// </summary>
        /// <remarks>
        /// Dieser Endpunkt liefert eine Liste aller Todo-Listen zurück
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TodoList&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TodoList>>> GetallTodoListWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Eintrag aktualisieren
        /// </summary>
        /// <remarks>
        /// Dieser Endpunkt aktualisiert einen bestimmten Eintrag in einer bestimmten Todo-Liste
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="entryId">URL-Element; ID des gewünschten Eintrags</param>
        /// <param name="newEntry">JSON-Objekt mit dem Namen und der Beschreibung des Eintrags</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateEntry200Response</returns>
        System.Threading.Tasks.Task<UpdateEntry200Response> UpdateEntryAsync(Guid listId, Guid entryId, NewEntry newEntry, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Eintrag aktualisieren
        /// </summary>
        /// <remarks>
        /// Dieser Endpunkt aktualisiert einen bestimmten Eintrag in einer bestimmten Todo-Liste
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="entryId">URL-Element; ID des gewünschten Eintrags</param>
        /// <param name="newEntry">JSON-Objekt mit dem Namen und der Beschreibung des Eintrags</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateEntry200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateEntry200Response>> UpdateEntryWithHttpInfoAsync(Guid listId, Guid entryId, NewEntry newEntry, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITodoListenverwaltungApi : ITodoListenverwaltungApiSync, ITodoListenverwaltungApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TodoListenverwaltungApi : ITodoListenverwaltungApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TodoListenverwaltungApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TodoListenverwaltungApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TodoListenverwaltungApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TodoListenverwaltungApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TodoListenverwaltungApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TodoListenverwaltungApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TodoListenverwaltungApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TodoListenverwaltungApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Eintrag erstellen Dieser Endpunkt erstellt einen neuen Eintrag in einer bestimmten Todo-Liste
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="newEntry">JSON-Objekt mit dem Namen und der Beschreibung des Eintrags</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Entries</returns>
        public Entries CreateEntry(Guid listId, NewEntry newEntry, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Entries> localVarResponse = CreateEntryWithHttpInfo(listId, newEntry);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Eintrag erstellen Dieser Endpunkt erstellt einen neuen Eintrag in einer bestimmten Todo-Liste
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="newEntry">JSON-Objekt mit dem Namen und der Beschreibung des Eintrags</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Entries</returns>
        public Org.OpenAPITools.Client.ApiResponse<Entries> CreateEntryWithHttpInfo(Guid listId, NewEntry newEntry, int operationIndex = 0)
        {
            // verify the required parameter 'newEntry' is set
            if (newEntry == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'newEntry' when calling TodoListenverwaltungApi->CreateEntry");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("list_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(listId)); // path parameter
            localVarRequestOptions.Data = newEntry;

            localVarRequestOptions.Operation = "TodoListenverwaltungApi.CreateEntry";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Entries>("/todo-list/{list_id}/entry", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Eintrag erstellen Dieser Endpunkt erstellt einen neuen Eintrag in einer bestimmten Todo-Liste
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="newEntry">JSON-Objekt mit dem Namen und der Beschreibung des Eintrags</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Entries</returns>
        public async System.Threading.Tasks.Task<Entries> CreateEntryAsync(Guid listId, NewEntry newEntry, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Entries> localVarResponse = await CreateEntryWithHttpInfoAsync(listId, newEntry, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Eintrag erstellen Dieser Endpunkt erstellt einen neuen Eintrag in einer bestimmten Todo-Liste
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="newEntry">JSON-Objekt mit dem Namen und der Beschreibung des Eintrags</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Entries)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Entries>> CreateEntryWithHttpInfoAsync(Guid listId, NewEntry newEntry, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'newEntry' is set
            if (newEntry == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'newEntry' when calling TodoListenverwaltungApi->CreateEntry");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("list_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(listId)); // path parameter
            localVarRequestOptions.Data = newEntry;

            localVarRequestOptions.Operation = "TodoListenverwaltungApi.CreateEntry";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Entries>("/todo-list/{list_id}/entry", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Todo-Liste hinzufügen Dieser Endpunkt erstellt eine neue Todo-Liste
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newTodoList">JSON-Objekt mit dem Namen der Liste</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TodoList</returns>
        public TodoList CreateTodoList(NewTodoList newTodoList, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TodoList> localVarResponse = CreateTodoListWithHttpInfo(newTodoList);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Todo-Liste hinzufügen Dieser Endpunkt erstellt eine neue Todo-Liste
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newTodoList">JSON-Objekt mit dem Namen der Liste</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TodoList</returns>
        public Org.OpenAPITools.Client.ApiResponse<TodoList> CreateTodoListWithHttpInfo(NewTodoList newTodoList, int operationIndex = 0)
        {
            // verify the required parameter 'newTodoList' is set
            if (newTodoList == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'newTodoList' when calling TodoListenverwaltungApi->CreateTodoList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = newTodoList;

            localVarRequestOptions.Operation = "TodoListenverwaltungApi.CreateTodoList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TodoList>("/todo-list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTodoList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Todo-Liste hinzufügen Dieser Endpunkt erstellt eine neue Todo-Liste
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newTodoList">JSON-Objekt mit dem Namen der Liste</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TodoList</returns>
        public async System.Threading.Tasks.Task<TodoList> CreateTodoListAsync(NewTodoList newTodoList, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TodoList> localVarResponse = await CreateTodoListWithHttpInfoAsync(newTodoList, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Todo-Liste hinzufügen Dieser Endpunkt erstellt eine neue Todo-Liste
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newTodoList">JSON-Objekt mit dem Namen der Liste</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TodoList)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TodoList>> CreateTodoListWithHttpInfoAsync(NewTodoList newTodoList, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'newTodoList' is set
            if (newTodoList == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'newTodoList' when calling TodoListenverwaltungApi->CreateTodoList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = newTodoList;

            localVarRequestOptions.Operation = "TodoListenverwaltungApi.CreateTodoList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TodoList>("/todo-list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTodoList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Eintrag löschen Dieser Endpunkt löscht einen bestimmten Eintrag in einer bestimmten Todo-Liste
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="entryId">URL-Element; ID des gewünschten Eintrags</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteTodoList200Response</returns>
        public DeleteTodoList200Response DeleteEntry(Guid listId, Guid entryId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<DeleteTodoList200Response> localVarResponse = DeleteEntryWithHttpInfo(listId, entryId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Eintrag löschen Dieser Endpunkt löscht einen bestimmten Eintrag in einer bestimmten Todo-Liste
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="entryId">URL-Element; ID des gewünschten Eintrags</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteTodoList200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<DeleteTodoList200Response> DeleteEntryWithHttpInfo(Guid listId, Guid entryId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("list_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(listId)); // path parameter
            localVarRequestOptions.PathParameters.Add("entry_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(entryId)); // path parameter

            localVarRequestOptions.Operation = "TodoListenverwaltungApi.DeleteEntry";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteTodoList200Response>("/todo-list/{list_id}/entry/{entry_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Eintrag löschen Dieser Endpunkt löscht einen bestimmten Eintrag in einer bestimmten Todo-Liste
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="entryId">URL-Element; ID des gewünschten Eintrags</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteTodoList200Response</returns>
        public async System.Threading.Tasks.Task<DeleteTodoList200Response> DeleteEntryAsync(Guid listId, Guid entryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DeleteTodoList200Response> localVarResponse = await DeleteEntryWithHttpInfoAsync(listId, entryId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Eintrag löschen Dieser Endpunkt löscht einen bestimmten Eintrag in einer bestimmten Todo-Liste
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="entryId">URL-Element; ID des gewünschten Eintrags</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteTodoList200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DeleteTodoList200Response>> DeleteEntryWithHttpInfoAsync(Guid listId, Guid entryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("list_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(listId)); // path parameter
            localVarRequestOptions.PathParameters.Add("entry_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(entryId)); // path parameter

            localVarRequestOptions.Operation = "TodoListenverwaltungApi.DeleteEntry";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteTodoList200Response>("/todo-list/{list_id}/entry/{entry_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Todo-Liste löschen Dieser Endpunkt löscht eine einzelne bestimmte Todo-Liste mitsamt ihren Einträgen anhand der ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteTodoList200Response</returns>
        public DeleteTodoList200Response DeleteTodoList(Guid listId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<DeleteTodoList200Response> localVarResponse = DeleteTodoListWithHttpInfo(listId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Todo-Liste löschen Dieser Endpunkt löscht eine einzelne bestimmte Todo-Liste mitsamt ihren Einträgen anhand der ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteTodoList200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<DeleteTodoList200Response> DeleteTodoListWithHttpInfo(Guid listId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("list_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(listId)); // path parameter

            localVarRequestOptions.Operation = "TodoListenverwaltungApi.DeleteTodoList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteTodoList200Response>("/todo-list/{list_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTodoList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Todo-Liste löschen Dieser Endpunkt löscht eine einzelne bestimmte Todo-Liste mitsamt ihren Einträgen anhand der ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteTodoList200Response</returns>
        public async System.Threading.Tasks.Task<DeleteTodoList200Response> DeleteTodoListAsync(Guid listId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DeleteTodoList200Response> localVarResponse = await DeleteTodoListWithHttpInfoAsync(listId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Todo-Liste löschen Dieser Endpunkt löscht eine einzelne bestimmte Todo-Liste mitsamt ihren Einträgen anhand der ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteTodoList200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DeleteTodoList200Response>> DeleteTodoListWithHttpInfoAsync(Guid listId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("list_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(listId)); // path parameter

            localVarRequestOptions.Operation = "TodoListenverwaltungApi.DeleteTodoList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteTodoList200Response>("/todo-list/{list_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTodoList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Todo-Liste abrufen Dieser Endpunkt liefert eine einzelne bestimmte Todo-Liste anhand der ID zurück
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TodoList</returns>
        public TodoList GetTodoList(Guid listId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TodoList> localVarResponse = GetTodoListWithHttpInfo(listId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Todo-Liste abrufen Dieser Endpunkt liefert eine einzelne bestimmte Todo-Liste anhand der ID zurück
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TodoList</returns>
        public Org.OpenAPITools.Client.ApiResponse<TodoList> GetTodoListWithHttpInfo(Guid listId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("list_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(listId)); // path parameter

            localVarRequestOptions.Operation = "TodoListenverwaltungApi.GetTodoList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TodoList>("/todo-list/{list_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTodoList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Todo-Liste abrufen Dieser Endpunkt liefert eine einzelne bestimmte Todo-Liste anhand der ID zurück
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TodoList</returns>
        public async System.Threading.Tasks.Task<TodoList> GetTodoListAsync(Guid listId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TodoList> localVarResponse = await GetTodoListWithHttpInfoAsync(listId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Todo-Liste abrufen Dieser Endpunkt liefert eine einzelne bestimmte Todo-Liste anhand der ID zurück
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TodoList)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TodoList>> GetTodoListWithHttpInfoAsync(Guid listId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("list_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(listId)); // path parameter

            localVarRequestOptions.Operation = "TodoListenverwaltungApi.GetTodoList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TodoList>("/todo-list/{list_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTodoList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Einträge abrufen Dieser Endpunkt liefert eine Liste aller Einträge einer bestimmten Todo-Liste zurück
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Entries&gt;</returns>
        public List<Entries> GetallEntries(Guid listId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Entries>> localVarResponse = GetallEntriesWithHttpInfo(listId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Einträge abrufen Dieser Endpunkt liefert eine Liste aller Einträge einer bestimmten Todo-Liste zurück
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Entries&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Entries>> GetallEntriesWithHttpInfo(Guid listId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("list_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(listId)); // path parameter

            localVarRequestOptions.Operation = "TodoListenverwaltungApi.GetallEntries";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Entries>>("/todo-list/{list_id}/entries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetallEntries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Einträge abrufen Dieser Endpunkt liefert eine Liste aller Einträge einer bestimmten Todo-Liste zurück
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Entries&gt;</returns>
        public async System.Threading.Tasks.Task<List<Entries>> GetallEntriesAsync(Guid listId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Entries>> localVarResponse = await GetallEntriesWithHttpInfoAsync(listId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Einträge abrufen Dieser Endpunkt liefert eine Liste aller Einträge einer bestimmten Todo-Liste zurück
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Entries&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Entries>>> GetallEntriesWithHttpInfoAsync(Guid listId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("list_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(listId)); // path parameter

            localVarRequestOptions.Operation = "TodoListenverwaltungApi.GetallEntries";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Entries>>("/todo-list/{list_id}/entries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetallEntries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Todo-Listen abrufen Dieser Endpunkt liefert eine Liste aller Todo-Listen zurück
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TodoList&gt;</returns>
        public List<TodoList> GetallTodoList(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<TodoList>> localVarResponse = GetallTodoListWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Todo-Listen abrufen Dieser Endpunkt liefert eine Liste aller Todo-Listen zurück
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TodoList&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<TodoList>> GetallTodoListWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TodoListenverwaltungApi.GetallTodoList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TodoList>>("/todo-lists", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetallTodoList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Todo-Listen abrufen Dieser Endpunkt liefert eine Liste aller Todo-Listen zurück
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TodoList&gt;</returns>
        public async System.Threading.Tasks.Task<List<TodoList>> GetallTodoListAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<TodoList>> localVarResponse = await GetallTodoListWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Todo-Listen abrufen Dieser Endpunkt liefert eine Liste aller Todo-Listen zurück
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TodoList&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<TodoList>>> GetallTodoListWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TodoListenverwaltungApi.GetallTodoList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TodoList>>("/todo-lists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetallTodoList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Eintrag aktualisieren Dieser Endpunkt aktualisiert einen bestimmten Eintrag in einer bestimmten Todo-Liste
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="entryId">URL-Element; ID des gewünschten Eintrags</param>
        /// <param name="newEntry">JSON-Objekt mit dem Namen und der Beschreibung des Eintrags</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateEntry200Response</returns>
        public UpdateEntry200Response UpdateEntry(Guid listId, Guid entryId, NewEntry newEntry, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<UpdateEntry200Response> localVarResponse = UpdateEntryWithHttpInfo(listId, entryId, newEntry);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Eintrag aktualisieren Dieser Endpunkt aktualisiert einen bestimmten Eintrag in einer bestimmten Todo-Liste
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="entryId">URL-Element; ID des gewünschten Eintrags</param>
        /// <param name="newEntry">JSON-Objekt mit dem Namen und der Beschreibung des Eintrags</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateEntry200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<UpdateEntry200Response> UpdateEntryWithHttpInfo(Guid listId, Guid entryId, NewEntry newEntry, int operationIndex = 0)
        {
            // verify the required parameter 'newEntry' is set
            if (newEntry == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'newEntry' when calling TodoListenverwaltungApi->UpdateEntry");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("list_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(listId)); // path parameter
            localVarRequestOptions.PathParameters.Add("entry_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(entryId)); // path parameter
            localVarRequestOptions.Data = newEntry;

            localVarRequestOptions.Operation = "TodoListenverwaltungApi.UpdateEntry";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<UpdateEntry200Response>("/todo-list/{list_id}/entry/{entry_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Eintrag aktualisieren Dieser Endpunkt aktualisiert einen bestimmten Eintrag in einer bestimmten Todo-Liste
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="entryId">URL-Element; ID des gewünschten Eintrags</param>
        /// <param name="newEntry">JSON-Objekt mit dem Namen und der Beschreibung des Eintrags</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateEntry200Response</returns>
        public async System.Threading.Tasks.Task<UpdateEntry200Response> UpdateEntryAsync(Guid listId, Guid entryId, NewEntry newEntry, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<UpdateEntry200Response> localVarResponse = await UpdateEntryWithHttpInfoAsync(listId, entryId, newEntry, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Eintrag aktualisieren Dieser Endpunkt aktualisiert einen bestimmten Eintrag in einer bestimmten Todo-Liste
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">URL-Element; ID der gewünschten Todo-Liste</param>
        /// <param name="entryId">URL-Element; ID des gewünschten Eintrags</param>
        /// <param name="newEntry">JSON-Objekt mit dem Namen und der Beschreibung des Eintrags</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateEntry200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UpdateEntry200Response>> UpdateEntryWithHttpInfoAsync(Guid listId, Guid entryId, NewEntry newEntry, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'newEntry' is set
            if (newEntry == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'newEntry' when calling TodoListenverwaltungApi->UpdateEntry");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("list_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(listId)); // path parameter
            localVarRequestOptions.PathParameters.Add("entry_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(entryId)); // path parameter
            localVarRequestOptions.Data = newEntry;

            localVarRequestOptions.Operation = "TodoListenverwaltungApi.UpdateEntry";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<UpdateEntry200Response>("/todo-list/{list_id}/entry/{entry_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
